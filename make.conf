#check native flags
#clang -march=native -E -v - </dev/null 2>&1|grep cc1
#gcc -march=native -E -v - </dev/null 2>&1|grep cc1

#support multislotting clang
LLVM_VER="10"
LLVM_PATH="/usr/lib/llvm/${LLVM_VER}/bin"
CC="${LLVM_PATH}/clang-${LLVM_VER}"
CXX="${LLVM_PATH}/clang++-${LLVM_VER} -stdlib=libc++"
CPP="${LLVM_PATH}/clang-cpp"
AR="${LLVM_PATH}/llvm-ar"
NM="${LLVM_PATH}/llvm-nm"
RANLIB="${LLVM_PATH}/llvm-ranlib"

LD="/usr/bin/ld.lld"	#LLVM lld
#LD="/usr/bin/ld.bfd"	#GNU lld

UARCH="znver1"

#=sys-devel/gcc:10 fails with flto=thin, >sys-devel/gcc:10 had no problem with
#this and would just do flto instead. need to swich whenever building pkgs that
#require gcc. tried to use package.env and env/ but $CFLAGS still get imported,
#luckily almost all pkgs are built w/ clang
#LTO="-flto=32"
LTO="-flto=thin"
CFLAGS="-pipe -O2 -mtune=${UARCH} -march=${UARCH} -fomit-frame-pointer -fno-common -ftree-vectorize ${LTO}"
CXXFLAGS="${CFLAGS}"
LDFLAGS="${CFLAGS} -Wl,--as-needed -Wl,--discard-all -Wl,--hash-style=gnu"
########################

USE="
X alsa threads opengl custom-cflags jit expat lcms gmp pch caps icu elogind
lz4 zstd lzo lzma brotli openssl sqlite udev jpeg png gif tiff webp svg
dbus wayland vulkan cairo vdpau vaapi libedit egl gles2 luajit xml cjk
-systemd -nls -doc -berkdb -idn -vala -readline -gnutls -man -curl -cxx
-cracklib -numa
"

ACCEPT_KEYWORDS="~amd64"
ALSA_CARDS=""
CHOST="x86_64-pc-linux-gnu"
CPU_FLAGS_X86="aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt sha sse sse2 sse3 sse4_1 sse4_2 sse4a ssse3"
CURL_SSL="openssl"
FFTOOLS=""
GRUB_PLATFORMS="efi-64"
INPUT_DEVICES="libinput"
L10N=""
LC_MESSAGES="C"
LLVM_TARGETS="AMDGPU BPF"
LUA_TARGETS="luajit2"
PHP_TARGETS="php7-4"
POLICY_TYPES="strict"
PYTHON_TARGETS="python3_8"
PYTHON_SINGLE_TARGET="${PYTHON_TARGETS}"
QEMU_SOFTMMU_TARGETS="x86_64"
QEMU_USER_TARGETS="x86_64"
RUBY_TARGETS="ruby27"
VIDEO_CARDS="amdgpu radeonsi"

EMERGE_DEFAULT_OPTS="--nospinner --ask --verbose"
MAKEOPTS="-j65 -l33"
DISTDIR="/var/distfiles"
PKGDIR="/var/packages"
PORTAGE_NICENESS="15"
PORTAGE_IONICE_COMMAND="ionice -c 3 -p \${PID}"
PORTAGE_TMPDIR="/tmp"
#PORTAGE_LOGDIR="/tmp/portage-logs"

FEATURES="cgroup collision-protect preserve-libs unmerge-orphans sfperms xattr"
FEATURES="${FEATURES} fixlafiles"
FEATURES="${FEATURES} unknown-features-warn"
FEATURES="${FEATURES} news nodoc noinfo"
FEATURES="${FEATURES} strict strict-keepdir"
#FEATURES="${FEATURES} stricter"
FEATURES="${FEATURES} parallel-fetch parallel-install"
FEATURES="${FEATURES} fail-clean"
#FEATURES="${FEATURES} keepwork keeptemp noclean"
FEATURES="${FEATURES} userfetch userpriv usersync"
FEATURES="${FEATURES} sandbox ipc-sandbox network-sandbox mount-sandbox pid-sandbox usersandbox"
#FEATURES="${FEATURES} -sandbox -usersandbox"
#FEATURES="${FEATURES} -sandbox -ipc-sandbox -network-sandbox -mount-sandbox -pid-sandbox -usersandbox"
FEATURES="${FEATURES} qa-unresolved-soname-deps"
FEATURES="${FEATURES} -merge-sync" #not needed with zfs

COLLISION_IGNORE=""
CLEAN_DELAY="0"
EMERGE_WARNING_DELAY="0"
ACCEPT_LICENSE="-* @FREE"

#PORTAGE_CHECKSUM_FILTER="* -whirlpool"

BINPKG_COMPRESS="zstd"
BINPKG_COMPRESS_FLAGS="--long=31"

#disable compressing, opting for zfs fs compression
PORTAGE_COMPRESS=""
PORTAGE_COMPRESS_FLAGS=""

#COLLISION_IGNORE=""

CONFIG_PROTECT="
/etc
/etc/init.d
/etc/conf.d
/usr/share/gnupg/qualified.txt
"

CONFIG_PROTECT_MASK="
/etc/sandbox.d
/etc/fonts/fonts.conf
/etc/gentoo-release
/etc/terminfo
/etc/dconf
/etc/ca-certificates.conf
/etc/revdep-rebuild
/etc/libvirt/nwfilter
"

GENTOO_MIRRORS="
http://gentoo.osuosl.org
http://cosmos.illinois.edu/pub/gentoo
http://gentoo.mirrors.easynews.com/linux/gentoo
http://gentoo.mirrors.tds.net/gentoo
http://mirrors.evowise.com/gentoo
"

INSTALL_MASK="
/usr/share/help
/usr/share/locale

/usr/share/man/ca
/usr/share/man/cs
/usr/share/man/da*
/usr/share/man/de*
/usr/share/man/es
/usr/share/man/fr*
/usr/share/man/hu
/usr/share/man/it*
/usr/share/man/ja
/usr/share/man/ko
/usr/share/man/nl
/usr/share/man/pl*
/usr/share/man/pt*
/usr/share/man/ru*
/usr/share/man/uk
/usr/share/man/zh*

/etc/systemd
/lib/systemd
/usr/lib*/systemd
"

PKG_INSTALL_MASK="${INSTALL_MASK}"

